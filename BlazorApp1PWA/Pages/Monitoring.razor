@page "/monitoring"
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<script>


    function getClientLocation() {
    return new Promise((resolve, reject) => {
    if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
    (position) => {
    resolve({
    latitude: position.coords.latitude,
    longitude: position.coords.longitude,
    accuracy: position.coords.accuracy
    });
    },
    (error) => {
    reject(error);
    }
    );
    } else {
    reject(new Error("Geolocation is not supported by this browser."));
    }
    });
    }


    function isMobileDevice() {
    const userAgent = navigator.userAgent || navigator.vendor || window.opera;
    return /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent.toLowerCase());
    }

    function redirectToMobileOnly() {
    if (!isMobileDevice()) {
    alert("This Submission Page is only accessible on mobile devices.");
    // window.location.href = "https://example.com/mobile-only"; // Redirect to a page or show an error
    }
    }



</script>

<h3>Monitoring</h3>


<div class="container">

    <EditForm Model="DataPoints">
        <div class="row p-2 border border-1">

        <div class="col-md-6 my-2 form-group">
            <label for="photosOfFieldVisit">Photos of Field Visit</label>
            <InputFile OnChange="OnFieldVisitPhotosLoad">

            </InputFile>
        </div>
        <div class="col-md-6 my-2 form-group">
            <label>Date</label>
            <InputDate @bind-Value="@DataPoints.Date"></InputDate>
        </div>
        </div>

    </EditForm>
    <div class="mt-2">
        <button type="submit" class="btn btn-primary" onsubmit="SaveData"> Submit</button>
    </div>
    <p>Latitude: @latitude</p>
    <p>Longitude: @longitude</p>
    <p>Accuracy: @accuracy</p>
    <p>Title:@Title</p>

</div>


@code {
    DataPointsModel DataPoints = new();
    private double latitude;
    private double longitude;
    private double accuracy;
    private string Title;

    protected override async Task OnInitializedAsync()
    {


    }

    protected override async Task OnAfterRenderAsync(bool f)
    {

        var location = await JSRuntime.InvokeAsync<Location>("getClientLocation");
        latitude = location.Latitude;
        longitude = location.Longitude;
        accuracy = location.Accuracy;
        Title = await GetLocationAsync(latitude, longitude);
        StateHasChanged();
    }

    public async Task<string> GetLocationAsync(double latitude, double longitude)
    {
        var url = $"https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}";
        //var url = $"https://www.metaweather.com/api/location/search/?lattlong={latitude},{longitude}";
        string address, errorMessage;
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.Headers.Add("User-Agent", "YourAppName/1.0");
            var response = await HttpClient.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var data = JsonSerializer.Deserialize<ReverseGeocodingResponse>(jsonResponse);
                address = data?.display_name ?? "No address found";
                // var data = JsonSerializer.Deserialize<LocationResponse>(jsonResponse);
                // address = data?.Title ?? "No address found";

                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = "Failed to get address";
                address = string.Empty;
            }
        }
        catch (HttpRequestException e)
        {
            errorMessage = $"Error: {e.Message}";
            address = string.Empty;
        }

        return address;

    }

    private async Task SaveData()
    {

    }


    private async Task OnFieldVisitPhotosLoad(InputFileChangeEventArgs e)
    {
        var photos = e.GetMultipleFiles().ToList();

        if (photos?.Count == 0) return;

        // foreach (var photo in photos)
        // {
        //     var fileExtension = Path.GetExtension(photo.Name).ToLower();

        //     if (ImageExtensions.Contains(fileExtension) is false)
        //     {
        //         await _jSRuntime.ToastrError("File Extension is not allowed.");
        //         IsFieldMonitoringImageUploaded = false;
        //         return;
        //     }

        //     if (photo.Size > maxFileSize)
        //     {
        //         await _jSRuntime.ToastrError("Size of image is too large.");
        //         IsFieldMonitoringImageUploaded = false;
        //         return;
        //     }

        //     MemoryStream ms = new();
        //     await photo.OpenReadStream(maxFileSize).CopyToAsync(ms);

        //     var filePath = "FileUploads/MonitoringVisit/Photos/";
        //     var fileName = $"{EntryId}_Photo_{Guid.NewGuid()}_{DateTime.Now.ToString("yyyyMMddHHmmss")}{fileExtension}";

        //     var statusCode = await _azureStorageService
        //         .UploadBlobAsync(ms, filePath, fileName);

        //     if (statusCode == AzureStorageStatusCodes.Success)
        //     {
        //         var insertDto = new InsertFieldMonitoringVisitDocumentUploadDto(
        //             FullClientDetails?.ClientID,
        //             EntryId,
        //             FieldMonitoringVisitDocumentUploadType.Photo,
        //             filePath,
        //             fileName,
        //             fileName,
        //             fileExtension,
        //             loggedInUserDetails.Id);

        //         await _fieldMonitoringVisitDocumentUploadsRepository
        //            .InsertAsync(insertDto);
        //     }
        // }
        // IsFieldMonitoringImageUploaded = false;

        // _photosOfFieldVisitId = Guid.NewGuid().ToString();
        // await _jSRuntime.ToastrSuccess("Photos uploaded successfully");
    }


    public class DataPointsModel
    {
        public string File { get; set; }
        public DateTime Date { get; set; }
    }
    public class Location
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public double Accuracy { get; set; }
    }
    public class LocationResponse
    {
        public string Title { get; set; }
    }
    private class ReverseGeocodingResponse
    {
        public string display_name { get; set; }
    }

}
